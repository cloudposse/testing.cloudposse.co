regions:
  - global
  #- us-east-1
  - us-east-2
  #- us-west-1
  #- us-west-2

account-blocklist:
  - "999999999999" # production

resource-types:
  # only nuke these resources
  targets:
    - IAMRole
    - IAMRolePolicy
    - IAMRolePolicyAttachment
    - IAMPolicy
    - IAMGroup
    - IAMGroupPolicyAttachment
    # Deleting S3 Objects individually takes too long. We are either going to
    # delete the entire S3 bucket or nothing in it, so we skip S3Object
    # - S3Object
    - S3Bucket
    - AutoScalingGroup
    - EC2Address
    - ElasticBeanstalkApplication
    - ElasticBeanstalkEnvironment
    - EC2VPC
    - EC2DHCPOption
    - EC2Instance
    - EC2Volume
    - EC2Subnet
    - EC2RouteTable
    - EC2NATGateway
    - EC2InternetGateway
    - EC2InternetGatewayAttachment
    - EC2NetworkACL
    - EC2SecurityGroup
    - EC2NetworkInterface
    - EC2KeyPair
    - ECSService
    - ECSCluster
    - EKSCluster
    - EKSFargateProfiles
    - EKSNodegroups
    - ELBLoadBalancer
    - ELBv2
    - ELBv2TargetGroup
    - LambdaFunction
    - LambdaEventSourceMapping
    - CloudformationStack
    - RDSInstance
    - CloudWatchLogsLogGroup
    - EMRCluster
    - Route53ResourceRecordSet
    - Route53HostedZone
    - ESDomain
    - RedshiftCluster
    - RedshiftParameterGroup
    # You cannot delete automated Redshift Snapshots, and trying to delete
    # them causes aws-nuke to exit with failure. Since we are not taking
    # manual snapshots, we do not need to worry about them, but if we did,
    # we should create a filter that leaves the automated snapshots alone.
    # - RedshiftSnapshot
    - RedshiftSubnetGroup
    - IAMOpenIDConnectProvider
  
  # don't nuke IAM users
  excludes:
    - IAMUser

accounts:
  # testing account
  126450723953:
    presets:
      - defaults
      - cpco

presets:
  defaults:
    filters:
      ECSCluster:
        - type: "regex"
          value: ".*cluster/fargate"
      ECSService:
        - type: "regex"
          value: ".*service/atlantis"
      EC2InternetGateway:
        - property: "tag:Name"
          type: "regex"
          value: "^$"
      EC2InternetGatewayAttachment:
        - property: "tag:igw:Name"
          type: "regex"
          value: "^$"
      EC2RouteTable:
        - property: "tag:Name"
          type: "regex"
          value: "^$"
      EC2Subnet:
        - property: "DefaultForAz"
          value: "true"
      EC2VPC:
        - property: "IsDefault"
          value: "true"
      EC2DHCPOption:
        - property: "tag:Name"
          type: "regex"
          value: "^$"
      IAMRole:
        - "OrganizationAccountAccessRole"
      IAMRolePolicy:
        - property: "role:RoleName"
          type: "regex"
          value: "^OrganizationAccountAccessRole$"
      EC2SecurityGroup:
        - property: "Name"
          type: "regex"
          value: "^fargate-default$"
      EC2NetworkInterface:
      # Lambda's do not set the `tag:Name` and the `Description` is not available for filtering
      # Description: AWS Lambda VPC ENI-eg-test-app-elasticsearch-cleanup-e45baaef-7c14-4926-b21c-04c6b77f9
      # Instead, we'll delete all EC2NetworkInterface that have `Status` of `available`.
      #  - property: "tag:Name"
      #    type: "regex"
      #    value: "^$"
        - property: "Status"
          type: "regex"
          value: "^(attaching|attached|detaching|detached)$"

      EC2Volume:
        - property: "tag:Name"
          type: "regex"
          value: "^$"
      CloudformationStack:
        - property: "tag:Name"
          type: "regex"
          value: "^$"
      RDSInstance:
        - property: "tag:Name"
          type: "regex"
          value: "^$"


  cpco:
    filters:
      S3Bucket:
        - property: "Name"
          type: "regex"
          value: "^cpco-.*"
      S3Object:
        - property: "Bucket"
          type: "regex"
          value: "^cpco-.*"
      EC2VPC:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2Volume:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2SecurityGroup:
        - property: "Name"
          type: "regex"
          value: "^cpco-.*"
        - property: "tag:Name"
          type: "regex"
          value: "^fargate-default$"
      EC2Instance:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2NetworkInterface:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2InternetGateway:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2NATGateway:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2InternetGatewayAttachment:
        - property: "tag:igw:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2Subnet:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2RouteTable:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EC2NetworkACL:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      AutoScalingGroup:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      ECSService:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      ECSCluster:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      EKSCluster:
        - type: "regex"
          value: "^cpco-.*"
      EKSNodegroups:
        - type: "regex"
          value: "^cpco-.*"
      EKSFargateProfile:
        - type: "regex"
          value: "^cpco-.*"
      ELBLoadBalancer:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      ELBv2:
        - type: "regex"
          value: "^cpco-.*"
        - type: "regex"
          value: "^atlantis$"
      ELBv2TargetGroup:
        - type: "regex"
          value: "^cpco-.*"
      CloudformationStack:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      RDSInstance:
        - property: "tag:Name"
          type: "regex"
          value: "^cpco-.*"
      IAMRole:
        - type: "regex"
          value: "^cpco-.*"
        - type: "regex"
          value: "^atlantis"
      IAMRolePolicy:
        - property: "role:RoleName"
          type: "regex"
          value: "^cpco-.*"
      IAMRolePolicyAttachment:
        - type: "regex"
          value: "^cpco-.*"
        - type: "regex"
          value: "^atlantis.*"
      IAMPolicy:
        - type: "regex"
          value: "^arn:aws:iam::[0-9]+:policy/cpco-.*"
        - type: "regex"
          value: "^arn:aws:iam::[0-9]+:policy/service-role/cpco-.*"
        - type: "regex"
          value: "^arn:aws:iam::[0-9]+:policy/atlantis.*"
      CloudWatchLogsLogGroup:
        - type: "regex"
          value: "^/aws/eks/cpco-.*"
        - type: "regex"
          value: "^/aws/lambda/CIS.*"
      EMRCluster:
        - type: "regex"
          value: "^cpco-.*"
      EC2KeyPair:
        - type: "regex"
          value: "^cpco-.*"
      IAMGroup:
        - type: "regex"
          value: "^cpco-.*"
      IAMGroupPolicyAttachment:
        - type: "regex"
          value: "^cpco-.*"
      IAMOpenIDConnectProvider:
      - property: "tag:Name"
        type: "regex"
        value: "^cpco-.*"
      Route53ResourceRecordSet:
        - property: "Name"
          type: "exact"
          value: "testing.cloudposse.co."
        - property: "Name"
          type: "exact"
          value: "us-west-2-ecs.testing.cloudposse.co."
        - property: "Name"
          type: "regex"
          value: ".*atlantis.*"
      Route53HostedZone:
        - property: "Name"
          type: "regex"
          value: "^(?:us-west-2.)?(?:us-west-2-ecs.)?testing.cloudposse.co."
